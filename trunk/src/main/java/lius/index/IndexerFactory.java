/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package lius.index;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.net.URL;import java.util.ArrayList;import java.util.List;import java.util.Map;import lius.config.LiusConfig;import lius.index.javaobject.BeanIndexer;import lius.index.mixedindexing.MixedIndexer;import lius.index.util.LiusUtils;import org.apache.log4j.Logger;import org.springframework.core.io.ClassPathResource;import org.springframework.core.io.FileSystemResource;import org.springframework.core.io.Resource;import org.springframework.core.io.UrlResource;/** * @author Rida Benjelloun (ridabenjelloun@gmail.com) */public class IndexerFactory {    static Logger logger = Logger.getLogger(IndexerFactory.class);    public static IndexService getIndexer(Object bean, LiusConfig lc) {        BeanIndexer indexer = new BeanIndexer();        indexer.setUp(lc);        return indexer;    }    public static IndexService getIndexer(Resource resource, LiusConfig lc) {        try {            IndexService result = null;            if (resource instanceof ClassPathResource) {                result = getIndexer(resource.getFile(), lc);            } else if (resource instanceof FileSystemResource) {                result = getIndexer(resource.getFile(), lc);            } else if (resource instanceof UrlResource) {                result = getIndexer(resource.getURL(), lc);            } else {                throw new IllegalArgumentException(                        "Can't find a indexer with a Resource of type ["                                + resource.getClass() + "]. The resource is ["                                + resource + "].");            }            return result;        } catch (IOException e) {            throw new IllegalArgumentException(e);        }    }    public static IndexService getIndexer(File file, LiusConfig lc) {        try {            if (file.isDirectory()) {                return createFolderIndexer(lc);            } else {                return getIndexer(new FileInputStream(file), MimeTypeUtils                        .getMimeType(file), lc);            }        } catch (FileNotFoundException e) {            throw new RuntimeException(e);        }    }    public static Indexer getIndexer(InputStream is, LiusConfig lc) {        return getIndexer(is, MimeTypeUtils.getMimeType(is), lc);    }    public static IndexService getIndexer(URL url, LiusConfig lc) {        try {            return getIndexer(url.openStream(), MimeTypeUtils.getMimeType(url),                    lc);        } catch (IOException e) {            throw new IllegalArgumentException(e);        }    }    public static IndexService getIndexer(InputStream is, String mimeType,            LiusConfig lc) {        Map mimeTypesClasses = lc.getMimeTypeClass();        if (mimeType == null || !mimeTypesClasses.containsKey(mimeType)) {            return null;        }        String className = (String) mimeTypesClasses.get(mimeType);        if (className != null) {            try {                logger                        .debug("Class = " + className + " MimeType = "                                + mimeType);                Class indexerClass = Class.forName(className);                BaseIndexer indexer = (BaseIndexer) indexerClass.newInstance();                indexer.setUp(lc);                return indexer;            } catch (ClassNotFoundException e) {                e.printStackTrace();            } catch (InstantiationException e) {                LiusUtils.doOnException(e);            } catch (IllegalAccessException e) {                LiusUtils.doOnException(e);            }        }        return null;    }    public static List getIndexersFromZipResource(Resource resource,            LiusConfig lc) throws IOException {        return getIndexersFromZipInputStream(resource.getInputStream(), lc);    }    public static List getIndexersFromZipInputStream(InputStream is,            LiusConfig lc) throws FileNotFoundException {        List indexers = new ArrayList();        List files = LiusUtils.unzip(is);        for (int i = 0; i < files.size(); i++) {            indexers.add(getIndexer((File) files.get(i), lc));        }        return indexers;    }    private static IndexService createFolderIndexer(LiusConfig lc) {        MixedIndexer indexer = new MixedIndexer();        indexer.setUp(lc);        return indexer;    }}